{"version":3,"sources":["webpack:///./src/app/application-pipes/application-pipes.module.ts","webpack:///./src/app/arraySort.pipes.ts","webpack:///./src/app/filter.pipes.ts","webpack:///./src/app/requests/my-requests/my-requests.module.ts","webpack:///./src/app/requests/my-requests/my-requests.page.html","webpack:///./src/app/requests/my-requests/my-requests.page.scss","webpack:///./src/app/requests/my-requests/my-requests.page.ts"],"names":[],"mappings":"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","file":"my-requests-my-requests-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FilterPipe } from '../filter.pipes';\nimport { ArraySortPipe } from '../arraySort.pipes';\n\n@NgModule({\n  declarations: [FilterPipe, ArraySortPipe],\n  imports: [\n    CommonModule\n  ],\n  exports: [FilterPipe, ArraySortPipe]\n})\nexport class ApplicationPipesModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n@Pipe({\n  name: 'sortArray'\n})\nexport class ArraySortPipe implements PipeTransform {\n  transform(array: Array<any>): Array<any> {\n    array.sort((a: any, b: any) => {\n      if (a.status > b.status) {\n        return -1;\n      } else if (a.status < b.status) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    return array;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n@Pipe({\n  name: 'filter'\n})\nexport class FilterPipe implements PipeTransform {\n  transform(arrangement: any[], text: string, column: string): any[] {\n    // if (text === '') {\n    //   return arrangement;\n    // }\n    if (!arrangement) {\n      return arrangement;\n    }\n    text = text.toLowerCase();\n\n    return arrangement.filter(item => {\n      return item.status.toLowerCase().includes(text);\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MyRequestsPage } from './my-requests.page';\nimport { ApplicationPipesModule } from 'src/app/application-pipes/application-pipes.module';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MyRequestsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ApplicationPipesModule\n  ],\n  declarations: [MyRequestsPage]\n})\nexport class MyRequestsPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button menu=\\\"m1\\\"></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>My Requests</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <ion-segment mode=\\\"md\\\" (ionChange)=\\\"onFilterUpdate($event)\\\" color=\\\"tertiary\\\">\\n    <ion-segment-button value=\\\"progress\\\" mode=\\\"md\\\"\\n      ><ion-label>Pending Requests</ion-label></ion-segment-button\\n    >\\n    <ion-segment-button value=\\\"completed\\\" mode=\\\"md\\\"\\n      ><ion-label>Completed Requests</ion-label></ion-segment-button\\n    >\\n  </ion-segment>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col size=\\\"12\\\" size-sm=\\\"8\\\" offset-sm=\\\"2\\\" text-center>\\n        <div *ngIf=\\\"isLoading\\\" text-center>\\n          <ion-spinner color=\\\"primary\\\"></ion-spinner>\\n        </div>\\n        <div\\n          text-center\\n          *ngIf=\\\"\\n            (requestsList | filter: status:'status')?.length <= 0 &&\\n            status === 'progress'\\n          \\\"\\n        >\\n          <p>\\n            No Requests found! Please create one first!\\n          </p>\\n          <ion-button color=\\\"primary\\\" routerLink=\\\"/requests/tabs/add-requests\\\"\\n            >Add Request</ion-button\\n          >\\n        </div>\\n        <div\\n          text-center\\n          *ngIf=\\\"\\n            (requestsList | filter: status:'status')?.length <= 0 &&\\n            status === 'completed'\\n          \\\"\\n        >\\n          <p>\\n            No Completed Requests yet...\\n          </p>\\n        </div>\\n        <ion-list *ngIf=\\\"!isLoading || requestsList?.length > 0\\\">\\n          <ion-item-sliding\\n            *ngFor=\\\"let request of requestsList | filter: status:'status'\\\"\\n            #slidingItem\\n          >\\n            <ion-item\\n              *ngIf=\\\"\\n                (this.authService.userType === 'p' &&\\n                  request.patientName === this.authService.userName) ||\\n                this.authService.userType === 'n'\\n              \\\"\\n            >\\n              <ion-thumbnail slot=\\\"start\\\">\\n                <ion-img [src]=\\\"request.imgUrl\\\"></ion-img>\\n              </ion-thumbnail>\\n              <ion-label>\\n                <h2>{{ request.title }}</h2>\\n                <h5>{{ request.description }}</h5>\\n                <p *ngIf=\\\"request.data !== ''\\\">\\n                  {{ request.date.toDate() | date: 'dd/MM/yyyy HH:mm':'+3' }}\\n                </p>\\n                <ion-text\\n                  *ngIf=\\\"\\n                    request.status === 'In progress' &&\\n                    this.segment.value === 'progress'\\n                  \\\"\\n                  color=\\\"primary\\\"\\n                >\\n                  {{ request.patientName }}\\n                </ion-text>\\n                <ion-text\\n                  *ngIf=\\\"\\n                    request.status === 'Completed' &&\\n                    this.segment.value === 'completed'\\n                  \\\"\\n                  color=\\\"primary\\\"\\n                >\\n                  {{ request.nurseName }}\\n                </ion-text>\\n                <ion-label\\n                  slot=\\\"start\\\"\\n                  text-right\\n                  *ngIf=\\\"\\n                    request.status === 'In progress' &&\\n                    this.segment.value === 'progress'\\n                  \\\"\\n                  color=\\\"secondary\\\"\\n                  >In progress</ion-label\\n                >\\n                <ion-label\\n                  *ngIf=\\\"\\n                    request.status === 'Completed' &&\\n                    this.segment.value === 'completed'\\n                  \\\"\\n                  color=\\\"success\\\"\\n                  slot=\\\"start\\\"\\n                  text-right\\n                  >Completed</ion-label\\n                >\\n              </ion-label>\\n            </ion-item>\\n            <div *ngIf=\\\"request.status !== 'Completed'\\\">\\n              <ion-item-options\\n                side=\\\"end\\\"\\n                *ngIf=\\\"this.authService.userType !== 'p'\\\"\\n              >\\n                <ion-item-option\\n                  color=\\\"secondary\\\"\\n                  (click)=\\\"setAsCompleted(slidingItem, request)\\\"\\n                  *ngIf=\\\"request.status !== 'Completed'\\\"\\n                >\\n                  <ion-icon name=\\\"done-all\\\" slot=\\\"icon-only\\\"></ion-icon>\\n                </ion-item-option>\\n              </ion-item-options>\\n            </div>\\n          </ion-item-sliding>\\n        </ion-list>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3JlcXVlc3RzL215LXJlcXVlc3RzL215LXJlcXVlc3RzLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { Request } from '../request.model';\nimport { RequestsService, RequestData } from '../requests.service';\nimport { IonItemSliding, IonSegment, LoadingController } from '@ionic/angular';\nimport { Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport {\n  AngularFirestore,\n  AngularFirestoreDocument,\n  AngularFirestoreCollection\n} from '@angular/fire/firestore';\nimport { Users } from 'src/app/users/users.model';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport { UserStateService } from 'src/app/auth/user-state.service';\n\n@Component({\n  selector: 'app-my-requests',\n  templateUrl: './my-requests.page.html',\n  styleUrls: ['./my-requests.page.scss']\n})\nexport class MyRequestsPage implements OnInit, OnDestroy {\n  requestsList: RequestData[];\n  requestSubscription: Subscription;\n  status = 'progress';\n  isLoading = false;\n  currUser: AngularFirestoreDocument<Users>;\n  userRef: AngularFirestoreCollection<Users>;\n  user$: Observable<Users[]>;\n\n  @ViewChild(IonSegment) segment: IonSegment;\n  requestsObs: Observable<any>;\n\n  constructor(\n    private requestsService: RequestsService,\n    private router: Router,\n    private loadingCtrl: LoadingController,\n    public authService: AuthService,\n    public firestore: AngularFirestore,\n    private userStateService: UserStateService\n  ) {}\n\n  ngOnInit() {\n    this.segment.value = 'progress';\n    this.requestSubscription = this.requestsService\n      .getRequests()\n      .subscribe(requests => {\n        this.requestsList = requests;\n      });\n  }\n\n  ngOnDestroy() {\n    if (this.requestSubscription) {\n      this.requestSubscription.unsubscribe();\n    }\n  }\n\n  onFilterUpdate(event: any) {\n    const filteredOption = event.detail.value;\n    this.status = filteredOption;\n  }\n\n  setAsCompleted(slidingItem: IonItemSliding, request: RequestData) {\n    slidingItem.close();\n    this.loadingCtrl\n      .create({\n        message: 'Setting Request as Completed...'\n      })\n      .then(loadingEl => {\n        loadingEl.present();\n        this.requestsService.updateRequest(request).then(() => {\n          loadingEl.dismiss();\n        });\n      });\n  }\n\n  deleteRequest(slidingItem: IonItemSliding, request: RequestData) {\n    console.log('in delete');\n    slidingItem.close();\n    this.loadingCtrl\n      .create({\n        message: 'Deleting Request...'\n      })\n      .then(loadingEl => {\n        loadingEl.present();\n        console.log('in delete 2');\n        this.requestsService.deleteRequest(request).then(() => {\n          loadingEl.dismiss();\n        });\n      });\n  }\n}\n"],"sourceRoot":""}